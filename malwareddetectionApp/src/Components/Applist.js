import React, { useEffect, useState } from "react";
import { View, Text, FlatList, ActivityIndicator, Alert } from "react-native";
import { getInstalledApps } from "react-native-get-app-list";
import axios from "axios";
import { API_KEYS } from "../APIConfig";

const BATCH_SIZE = 4; // Adjust based on API limits
const REQUEST_DELAY = 15000; // 15 sec to respect VirusTotal Free API limits

const suspiciousAppsList = [
    "com.example.malware",
    "com.trojan.hackapp",
    "com.spyware.tracker",
];

const AppList = () => {
    const [apps, setApps] = useState([]);
    const [loading, setLoading] = useState(true);
    const [threatData, setThreatData] = useState({});
    const [scanProgress, setScanProgress] = useState(0);

    useEffect(() => {
        async function fetchApps() {
            try {
                const installedApps = await getInstalledApps();
                setApps(installedApps);
            } catch (error) {
                console.log("Error fetching installed apps:", error);
                Alert.alert("Error", "Failed to fetch installed apps.");
            } finally {
                setLoading(false);
            }
        }
        fetchApps();
    }, []);

    useEffect(() => {
        if (apps.length > 0) {
            batchCheckAppsThreat();
        }
    }, [apps]);

    const batchCheckAppsThreat = async () => {
        let scanned = 0;
        for (let i = 0; i < apps.length; i += BATCH_SIZE) {
            const batch = apps.slice(i, i + BATCH_SIZE);
            await Promise.all(batch.map(app => processAppThreatCheck(app)));
            scanned += batch.length;
            setScanProgress(((scanned / apps.length) * 100).toFixed(2));

            if (i + BATCH_SIZE < apps.length) {
                await new Promise(resolve => setTimeout(resolve, REQUEST_DELAY));
            }
        }
    };

    const processAppThreatCheck = async (app) => {
        try {
            const isSuspicious = checkLocalThreatDatabase(app.packageName) || await checkVirusTotalThreat(app.packageName);
            setThreatData(prev => ({ ...prev, [app.packageName]: isSuspicious ? "⚠️ Malicious" : "✅ Safe" }));
        } catch (error) {
            console.log(`Error processing ${app.packageName}:`, "VM3 &platform=androi…ue&shallow=true:119 Error checking VirusTotal: Request failed with status code 400");
            setThreatData(prev => ({ ...prev, [app.packageName]: "❌ Error checking" }));
        }
    };

    const checkLocalThreatDatabase = (packageName) => {
        return suspiciousAppsList.includes(packageName);
    };

    const checkVirusTotalThreat = async (packageName) => {
        try {
            const response = await axios.get(
                `https://www.virustotal.com/api/v3/domains/${packageName}`,
                { headers: { "x-apikey": API_KEYS.VIRUSTOTAL } }
            );

            const stats = response.data.data.attributes.last_analysis_stats;
            return stats.malicious > 0;
        } catch (error) {
            console.log("Error checking VirusTotal:", "VM3 &platform=androi…ue&shallow=true:119 Error checking VirusTotal: Request failed with status code 400");
            return false;
        }
    };

    return (
        <View style={{ flex: 1, padding: 10, backgroundColor: "#f9f9f9" }}>
            {loading ? (
                <ActivityIndicator size="large" color="blue" />
            ) : (
                <>
                    <Text style={{ fontSize: 16, fontWeight: "bold", marginBottom: 10 }}>
                        Scan Progress: {scanProgress}%
                    </Text>
                    <FlatList
                        data={apps}
                        keyExtractor={(item) => item.packageName}
                        renderItem={({ item }) => (
                            <View style={{ padding: 15, borderBottomWidth: 1, borderColor: "#ddd" }}>
                                <Text style={{ fontSize: 16, fontWeight: "bold" }}>{item.appName}</Text>
                                <Text style={{ color: "gray" }}>{item.packageName}</Text>
                                <Text style={{
                                    color: threatData[item.packageName] === "⚠️ Malicious" ? "red" : "green",
                                }}>
                                    {threatData[item.packageName] || "⏳ Checking..."}
                                </Text>
                            </View>
                        )}
                    />
                </>
            )}
        </View>
    );
};

export default AppList;
